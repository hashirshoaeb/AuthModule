//
//  SignupInteractor.swift
//  AuthModule
//
//  Created by Hashir Shoaib on 15/08/2022.
//  Copyright (c) 2022 hashirshoaeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignupBusinessLogic {
    func onUsernameChanged(value: String?)
    func onEmailChanged(value: String?)
    func onPasswordChanged(value: String?)
    func onSignupButtonPressed()
}

protocol SignupDataStore {
    var username: String? { get set }
    var email: String? { get set }
    var password: String? { get set }
}

class SignupInteractor: SignupBusinessLogic, SignupDataStore {
    // MARK: - VIP SETUP
    
    let presenter: SignupPresentationLogic
    var worker: SignupWorker?
    
    init(presenter: SignupPresentationLogic) {
        self.presenter = presenter
    }
    
    // MARK: - DATA STORE
    
    var username: String?
    var email: String?
    var password: String?
    
    // MARK: - BUSINESS LOGIC
    
    func onUsernameChanged(value: String?) {
        username = value
        presenter.removeUsernameValidationError()
    }
    
    func onEmailChanged(value: String?) {
        email = value
        presenter.removeEmailValidationError()
    }
    
    func onPasswordChanged(value: String?) {
        password = value
        presenter.removePasswordValidationError()
    }
    
    func onSignupButtonPressed() {
        // tell presenter that sign up is in progress
        // validate data fields
        // if validation failed
        // tell presenter to show validation error
        // else
        // make api call and await for the response
        // if respose is error
        // tell presenter to show error
        // if success tell presenter (todo)
        // in the end tell presenter to end inprogress state
        presenter.showSignupInProgress()
        let isValidated = validate()
        if !isValidated {
            return
        } else {
            // make api call
        }
        presenter.removeSignupFromProgress()
    }
    
    func validate() -> Bool {
        var validationSuccess = true
        if let email = email {
            if email.isEmpty {
                presenter.showEmailValidationError(error: "Email is empty")
                validationSuccess = false
            }
        } else {
            presenter.showEmailValidationError(error: "Email is empty")
            validationSuccess = false
        }
        if let password = password {
            if password.count < 4 {
                presenter.showPasswordValidationError(error: "Password is too short")
                validationSuccess = false
            }
        } else {
            presenter.showPasswordValidationError(error: "Password is empty")
            validationSuccess = false
        }
        if let username = username {
            if username.isEmpty {
                presenter.showUsernameValidationError(error: "username is empty")
                validationSuccess = false
            }
        } else {
            presenter.showUsernameValidationError(error: "username is empty")
            validationSuccess = false
        }
        
        return validationSuccess
    }
}
