//
//  SignupViewController.swift
//  AuthModule
//
//  Created by Hashir Shoaib on 15/08/2022.
//  Copyright (c) 2022 hashirshoaeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol VIPSetup {
    func setup() -> Void
}

protocol SignupDisplayLogic {
    //    func displaySomething(viewModel: Signup.Something.ViewModel)
    func showUsernameValidationError(error: String)
    func removeUsernameValidationError()
    func showEmailValidationError(error: String)
    func removeEmailValidationError()
    func showPasswordValidationError(error: String)
    func removePasswordValidationError()
    func showSignupInProgress()
    func removeSignupFromProgress()
}

class SignupViewController: UIViewController, VIPSetup, SignupDisplayLogic {
    // MARK: - VIP SETUP
    
    var interactor: SignupBusinessLogic! {
        didSet {
//            assert(interactor == nil, "Do not assign nil")
//            assert(oldValue != nil, "Value should be assigned once")
        }
    }
    
    var router: (NSObjectProtocol & SignupRoutingLogic & SignupDataPassing)? {
        didSet {
//            assert(router == nil, "Do not assign nil")
//            assert(oldValue != nil, "Value should be assigned once")
        }
    }
    
    internal func setup() {
        let viewController = self
        let presenter = SignupPresenter(viewController: viewController)
        let router = SignupRouter()
        let interactor = SignupInteractor(presenter: presenter) //workers could be multiple, also i think VC shouldn't know about worker
        viewController.interactor = interactor
        viewController.router = router
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    
    
    // MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        //        if let scene = segue.identifier {
        //            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
        //            if let router = router, router.responds(to: selector) {
        //                router.perform(selector, with: segue)
        //            }
        //        }
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        //        doSomething()
    }
    
    
    // MARK: - VIEW
    
    @IBOutlet weak var logoImageView: UIImageView!
    @IBOutlet weak var usernameTextField: UITextField!
    @IBOutlet weak var emailTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var usernameErrorMessageLabel: UILabel!
    @IBOutlet weak var emailErrorMessageLabel: UILabel!
    @IBOutlet weak var passwordMessageLabel: UILabel!
    
    
    @IBAction func onUsernameChanged(_ sender: UITextField) {
        interactor.onUsernameChanged(value: sender.text)
    }
    
    @IBAction func onEmailChanged(_ sender: UITextField) {
        interactor.onEmailChanged(value: sender.text)
    }
    
    @IBAction func onPasswordChanged(_ sender: UITextField) {
        interactor.onPasswordChanged(value: sender.text)
    }
    
    @IBAction func onSignupButtonTapped(_ sender: UIButton) {
        interactor.onSignupButtonPressed()
    }
    
    // MARK: - DISPLAY LOGIC
    
    func showUsernameValidationError(error: String) {
        usernameErrorMessageLabel.text = error
    }
    
    func removeUsernameValidationError() {
        usernameErrorMessageLabel.text = ""
    }
    
    func showEmailValidationError(error: String) {
        emailErrorMessageLabel.text = error
    }
    
    func removeEmailValidationError() {
        emailErrorMessageLabel.text = ""
    }
    
    func showPasswordValidationError(error: String) {
        passwordMessageLabel.text = error
    }
    
    func removePasswordValidationError() {
        passwordMessageLabel.text = ""
    }
    
    func showSignupInProgress() {
        
    }
    
    func removeSignupFromProgress() {
        print("sign up success")
    }
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    //    func doSomething()
    //    {
    //        let request = Signup.Something.Request()
    //        interactor?.doSomething(request: request)
    //    }
    
    //    func displaySomething(viewModel: Signup.Something.ViewModel)
    //    {
    //        //nameTextField.text = viewModel.name
    //    }
}
